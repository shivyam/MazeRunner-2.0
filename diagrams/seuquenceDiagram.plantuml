@startuml

actor User
participant Main
participant PathValidator
participant Maze

User -> Main: Start MazeRunner
activate Main

Main -> Main: Parse command-line arguments

activate Main

Main -> CommandLineParser: Create CommandLineParser
activate CommandLineParser

CommandLineParser -> CommandLineParser: Define parser options
CommandLineParser -> CommandLineParser: Parse command-line arguments (args)
CommandLineParser -> CommandLine: Get parsed command-line options
CommandLine --> CommandLineParser: Return parsed CommandLine

deactivate CommandLineParser

alt Validation Path
    Main -> PathValidator: Create PathValidator with maze and user path
    activate PathValidator
    PathValidator -> PathValidator: Convert user path to canonical form
    PathValidator -> Maze: Get maze details
    Maze --> PathValidator: Maze information
    PathValidator -> PathValidator: Check path validity
    PathValidator --> Main: Validation result
    deactivate PathValidator

else Maze Solver
    alt RightHandSolver
        Main -> RightHandSolver: Create RightHandSolver
        activate RightHandSolver
        RightHandSolver -> RightHandSolver: Initialize with Maze
        RightHandSolver -> RightHandSolver: Solve the maze using right-hand rule
        RightHandSolver --> Main: Return solved path
        deactivate RightHandSolver
    else BreadthFirstSearch
        Main -> BreadthFirstSearch: Create BreadthFirstSearch
        activate BreadthFirstSearch
        BreadthFirstSearch -> BreadthFirstSearch: Initialize with Maze
        BreadthFirstSearch -> BreadthFirstSearch: Solve the maze using bfs algorithm
        BreadthFirstSearch --> Main: Return solved path
        deactivate BreadthFirstSearch
    end
end

Main -> Main: Output results

deactivate Main

@enduml


